// R-Wert und L-Wert
//
// 𝐷𝑒𝑓: Ein 𝐿-𝑊𝑒𝑟𝑡 ist ein Ausdruck, der links von
// einer Zuweisung stehen darf.
// Alles andere ist ein 𝑅-𝑊𝑒𝑟𝑡.

int   f(int   i)         { return i > 100 ? i - 10 : f(f(i + 11)); }
int & g(int & j)         { j = 2*j + 1; return j; }
int   h(int const & k)   { return (k + 1) * (k - 1); }

int main()
{
// Aufgaben:
// 1)
  int i = 1;
  i = 3; // TODO (a) ok?
  3 = i; // TODO (b) ok?

// 2)
  int ar[3] = { 2, 3, 5 };
  ar[2] = 7; // TODO ok?

// 3)
  int   j  = 1;
  int * jp = &j;
  *jp = 3; // TODO (a) ok?

  jp = ar; // TODO (b) ok?
  ar = jp; // TODO (c) ok?

  *(jp + 1) = 3; // TODO (d) ok?

// 4)
  1+2 = 5; // TODO ok?

// 5)
  int k = 1;
  ++k = 3; // TODO (a) ok? Wenn ja, was tut es?
  k++ = 3; // TODO (b) ok? Wenn ja, was tut es?

// 6)
  int m = 1, n = 2;
  f(m) = 3; // TODO (a) ok? Wenn ja, was tut es?
  g(m) = 4; // TODO (b) ok? Wenn ja, was tut es?

// 7)
  (m > n ? m : n) = (m > n ? n : m) // TODO (a) ok? Wenn ja, was tut es?
  (m > n ? ++m : n--) = m; // TODO (b) ok? Wenn ja, was tut es?

// 8)
  int p = 2;
  p = h(p); // TODO (a) ok?
  p = h(2); // TODO (b) ok?

// 9)
  int q   = 2;

  int       & r = q; // TODO (a) ok?
  int       & s = 2; // TODO (b) ok?
  int const & t = q; // TODO (c) ok?
  int const & u = 2; // TODO (d) ok?
}

// 10)
  // Es sei ein Datentyp  Polynom  gegeben, der
  // bereits eine Funktion  plus_eq(p, q)  (vergl. +=)
  // besitzt.
  // Wir wissen, dass die Geschwindigkeit des Algorithmus
  // nur vom Grad des rechten Operanden abhängt (es ist eine
  // Funktion  deg(p), die den Grad des Polynoms  p  bestimmt,
  // vorhanden.)

  // Da die Addition kommutativ ist, wäre es günstig, die
  // Operanden so zu übergeben, dass der rechte Operand den
  // kleineren Grad hat.

  void  plus_eq(Polynom       & p, Polynom const & q);
  int   deg    (Polynom const & p);

  // TODO: Entscheiden Sie, ob die Implementierung syntaktische
  //       oder semantische Fehler enthält.
  //       Geben Sie mögliche mindestens 2 verschiedene Lösungen an.
  //       Erklären Sie, was formal an den mit syn. markierten Stellen
  //       passiert und an den mit sem. m. St. was es anschaulich tut.
  Polynom plus(Polynom const & p, Polynom const & q);
  {
    Polynom   a = deg(p) > deg(q) ? p : q; // TODO sem.
    Polynom & b = deg(p) > deg(q) ? q : p; // TODO syn./sem.

    return plus_eq(a, b); // TODO syn./sem.
  }
